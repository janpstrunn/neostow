#!/usr/bin/env bash

NEOSTOW_FILE="$PWD/.neostow"
DIR=$PWD

function help() {
  cat <<EOF
Neostow
Usage: neostow [flag] [command]
Available flags:
-d                       - Remove all symlinks
-r                       - Overwrite symlinks
-s                       - Skip Wget Download
-t <absolute_path>       - Target a different project directory
-v                       - Enable verbose
Available commands:
help                   - Displays this message and exits
EOF
}

function verbose() {
  if [ "$WGET" = "true" ]; then
    if [ $val -eq 0 ]; then
      message="Downloaded"
    else
      message="Failed to download"
    fi
    if [ -n "$DELETE" ]; then
      message="Deleted"
    fi
    echo "$message: $raw_source"
    return
  fi
  echo "$message: $dest_folder/$file"
}

function create_links() {
  local source_file dest_folder file message wget_arg
  source_file="$1"
  dest_folder=$2
  file=$(basename "$source_file")
  message="Created symlink"
  if [[ "$WGET" = "true" ]]; then
    if [ -n "$DELETE" ]; then
      rm "$dest_folder/$file"
    else
      if [ -n "$VERBOSE" ]; then
        wget_arg=-v
      else
        wget_arg="--no-verbose"
      fi
      wget "$wget_arg" -O "$dest_folder/$file" "$source_file"
      val="$?"
    fi
    if [ -n "$VERBOSE" ]; then
      verbose
      unset val
    fi
  else
    if [ -n "$OVERWRITE" ]; then
      ln -sf "$source_file" "$dest_folder"
    elif [ -n "$DELETE" ]; then
      message="Deleted symlink"
      rm "$dest_folder/$file"
    else
      ln -s "$source_file" "$dest_folder"
    fi
    if [ -n "$VERBOSE" ]; then
      verbose
    fi
  fi
}

function main() {
  if [[ ! -f "$NEOSTOW_FILE" ]]; then
    echo "Error: $NEOSTOW_FILE not found"
    exit 1
  fi
  local file_lines i threshold source_file dest_folder working_data
  declare -i file_lines
  declare -i i
  file_lines=$(wc -l <"$NEOSTOW_FILE")
  i=1
  declare -i threshold=("$file_lines"+1)
  while [ "$i" -lt "$threshold" ]; do
    working_data=$(bat --line-range "$i":"$i" "$NEOSTOW_FILE")
    source_file="$(awk -F '=' '{print $1}' <<<"$working_data")"
    raw_source="$source_file"
    case "$source_file" in
    https://*)
      if [ -n "$SKIP" ]; then
        continue
      fi
      WGET=true
      dest_folder=$(awk -F '=' '{print $2}' <<<"$working_data")
      eval dest_folder="$dest_folder"
      create_links "$source_file" "$dest_folder"
      ;;
    *)
      source_file="$DIR/$source_file"
      if [[ -f "$source_file" ]] || [[ -d "$source_file" ]]; then
        dest_folder=$(awk -F '=' '{print $2}' <<<"$working_data")
        eval dest_folder="$dest_folder"
        create_links "$source_file" "$dest_folder"
      else
        if [ -n "$VERBOSE" ]; then
          echo "File or directory $source_file does not exist. Skipping..."
        fi
        continue
      fi
      ;;
    esac
    i+=1
    unset working_data
  done
}

while getopts ":hdrt:vs" opt; do
  case "$opt" in
  r)
    OVERWRITE=true
    ;;
  d)
    DELETE=true
    ;;
  h)
    help
    exit 0
    ;;
  t)
    DIR="$OPTARG"
    NEOSTOW_FILE="$OPTARG/.neostow"
    ;;
  v)
    VERBOSE=true
    ;;
  s)
    SKIP=true
    ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
help)
  help
  exit 0
  ;;
esac

main
